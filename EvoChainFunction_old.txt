
/*
async function getEvolutionChains(POKEMONURL, POKEMON) {
  let response = await fetch(EVOLUTION_URL + `?limit=541&offset=0`);
  let responseToJson = await response.json();
  for (let evolutionIndex = 0; evolutionIndex < responseToJson.results.length; evolutionIndex++) {
    let evolutionChain = responseToJson.results[evolutionIndex];
    //getEvolution(POKEMONURL, POKEMON, evolutionChain.url);
  }
}



async function getEvolution(POKEMONURL, POKEMON, URL) {
  let response = await fetch(URL);
  if (!response.ok) { 
    throw new Error(`URL not found or invalid (Status: ${response.status})`);
  }
  let responseToJson = await response.json();
  let firstEvoPokemon = responseToJson.chain.species;
  let secondEvoPokemon = responseToJson.chain.evolves_to.length > 0 ? responseToJson.chain.evolves_to[0].species : null;
  let thirdEvoPokemon = (secondEvoPokemon && responseToJson.chain.evolves_to[0].evolves_to.length > 0) ? responseToJson.chain.evolves_to[0].evolves_to[0].species : null;
  if (firstEvoPokemon.name === POKEMON.name || (secondEvoPokemon && secondEvoPokemon.name === POKEMON.name) || (thirdEvoPokemon && thirdEvoPokemon.name === POKEMON.name)) {
      let firstEvoPokemonURL = await fetch(`${BASE_URL}/${firstEvoPokemon.name}`);
      let first = await firstEvoPokemonURL.json();
      let second = null;
      if (secondEvoPokemon) {
          let secondEvoPokemonURL = await fetch(`${BASE_URL}/${secondEvoPokemon.name}`);
          second = await secondEvoPokemonURL.json();
      }
      let third = null;
      if (thirdEvoPokemon) {
          let thirdEvoPokemonURL = await fetch(`${BASE_URL}/${thirdEvoPokemon.name}`);
          third = await thirdEvoPokemonURL.json();
      }
      pokemonEvolutionHTML(POKEMONURL, POKEMON, first, second, third);
  } 
}
*/